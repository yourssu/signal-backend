name: Dev - Build and Deploy to EC2

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev

    defaults:
      run:
        working-directory: ./

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Clean Build with Gradle (with Testing)
        run: |
          ./gradlew clean build

      - name: Deploy to EC2
        env:
          YOURSSU_PEM: ${{ secrets.YOURSSU_PEM }}
          HOST: ${{ vars.HOST_URL }}

          SERVER_PORT: ${{ vars.SERVER_PORT }}
          CORS_ALLOWED_ORIGIN: ${{ vars.CORS_ALLOWED_ORIGIN }}

          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

          ADMIN_ACCESS_KEY: ${{ secrets.ADMIN_ACCESS_KEY }}
          CONTACT_SECRET_KEY: ${{ secrets.CONTACT_SECRET_KEY }}

          WHITELIST: ${{ vars.WHITELIST }}
          CONTACT_LIMIT: ${{ vars.CONTACT_LIMIT }}
          CONTACT_LIMIT_WARNING: ${{ vars.CONTACT_LIMIT_WARNING }}
          CONTACT_PRICE: ${{ vars.CONTACT_PRICE }}
          TICKET_COST: ${{ vars.TICKET_COST }}
          TICKET_PRICE_POLICY: ${{ vars.TICKET_PRICE_POLICY }}
          TICKET_PRICE_REGISTERED_POLICY: ${{ vars.TICKET_PRICE_REGISTERED_POLICY }}

          OPENAI_URL: ${{ vars.OPENAI_URL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ vars.OPENAI_MODEL }}
          OPENAI_PROMPT: ${{ vars.OPENAI_PROMPT }}
          USER_INPUT_LIMIT: ${{ vars.USER_INPUT_LIMIT }}

          ENVIRONMENT: ${{ vars.ENVIRONMENT }}
          SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
          SLACK_CHANNEL: ${{ vars.SLACK_CHANNEL }}
          SLACK_ADMIN_CHANNEL: ${{ vars.SLACK_ADMIN_CHANNEL }}
          SLACK_LOG_CHANNEL: ${{ vars.SLACK_LOG_CHANNEL }}

          KAKAOPAY_ADMIN_KEY: ${{ secrets.KAKAOPAY_ADMIN_KEY }}
          KAKAOPAY_CID: ${{ vars.KAKAOPAY_CID }}
          KAKAOPAY_APPROVAL_URL: ${{ vars.KAKAOPAY_APPROVAL_URL }}
          KAKAOPAY_CANCEL_URL: ${{ vars.KAKAOPAY_CANCEL_URL }}
          KAKAOPAY_FAIL_URL: ${{ vars.KAKAOPAY_FAIL_URL }}

          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_ACCESS_TOKEN_EXPIRATION: ${{ vars.JWT_ACCESS_TOKEN_EXPIRATION }}
          JWT_REFRESH_TOKEN_EXPIRATION: ${{ vars.JWT_REFRESH_TOKEN_EXPIRATION }}

          GOOGLE_OAUTH_CLIENT_ID: ${{ vars.GOOGLE_OAUTH_CLIENT_ID }}
          GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
          GOOGLE_OAUTH_REDIRECT_URI: ${{ vars.GOOGLE_OAUTH_REDIRECT_URI }}

        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H $HOST >> ~/.ssh/known_hosts
          echo "$YOURSSU_PEM" > yourssu.pem
          chmod 600 yourssu.pem
          mv build/libs/signal-0.0.1-SNAPSHOT.jar yourssu-signal-application.jar
          scp -i yourssu.pem yourssu-signal-application.jar ubuntu@$HOST:/home/ubuntu/signal-api
          
          echo "SERVER_PORT=$SERVER_PORT" >> .env
          echo "CORS_ALLOWED_ORIGIN=$CORS_ALLOWED_ORIGIN" >> .env
          
          echo "DB_URL=$DB_URL" >> .env
          echo "DB_USERNAME=$DB_USERNAME" >> .env
          echo "DB_PASSWORD=$DB_PASSWORD" >> .env
          
          echo "ADMIN_ACCESS_KEY=$ADMIN_ACCESS_KEY" >> .env
          echo "CONTACT_SECRET_KEY=$CONTACT_SECRET_KEY" >> .env
          
          echo "WHITELIST=$WHITELIST" >> .env
          echo "CONTACT_LIMIT=$CONTACT_LIMIT" >> .env
          echo "CONTACT_LIMIT_WARNING=$CONTACT_LIMIT_WARNING" >> .env
          echo "TICKET_COST=$TICKET_COST" >> .env
          echo "TICKET_PRICE_POLICY=$TICKET_PRICE_POLICY" >> .env
          echo "TICKET_PRICE_REGISTERED_POLICY=$TICKET_PRICE_REGISTERED_POLICY" >> .env
          
          echo "OPENAI_URL=$OPENAI_URL" >> .env
          echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> .env
          echo "OPENAI_MODEL=$OPENAI_MODEL" >> .env
          echo "OPENAI_PROMPT=$OPENAI_PROMPT" >> .env
          echo "USER_INPUT_LIMIT=$USER_INPUT_LIMIT" >> .env
          
          echo "ENVIRONMENT=$ENVIRONMENT" >> .env
          echo "SLACK_TOKEN=$SLACK_TOKEN" >> .env
          echo "SLACK_CHANNEL=$SLACK_CHANNEL" >> .env
          echo "SLACK_ADMIN_CHANNEL=$SLACK_ADMIN_CHANNEL" >> .env
          echo "SLACK_LOG_CHANNEL=$SLACK_LOG_CHANNEL" >> .env
          
          echo "KAKAOPAY_ADMIN_KEY=$KAKAOPAY_ADMIN_KEY" >> .env
          echo "KAKAOPAY_CID=$KAKAOPAY_CID" >> .env
          echo "KAKAOPAY_APPROVAL_URL=$KAKAOPAY_APPROVAL_URL" >> .env
          echo "KAKAOPAY_CANCEL_URL=$KAKAOPAY_CANCEL_URL" >> .env
          echo "KAKAOPAY_FAIL_URL=$KAKAOPAY_FAIL_URL" >> .env

          echo "JWT_SECRET=$JWT_SECRET" >> .env
          echo "JWT_ACCESS_TOKEN_EXPIRATION=$JWT_ACCESS_TOKEN_EXPIRATION" >> .env
          echo "JWT_REFRESH_TOKEN_EXPIRATION=$JWT_REFRESH_TOKEN_EXPIRATION" >> .env
          
          echo "GOOGLE_OAUTH_CLIENT_ID=$GOOGLE_OAUTH_CLIENT_ID" >> .env
          echo "GOOGLE_OAUTH_CLIENT_SECRET=$GOOGLE_OAUTH_CLIENT_SECRET" >> .env
          echo "GOOGLE_OAUTH_REDIRECT_URI=$GOOGLE_OAUTH_REDIRECT_URI" >> .env
          
          scp -i yourssu.pem .env ubuntu@$HOST:/home/ubuntu/signal-api
          ssh -i yourssu.pem ubuntu@$HOST "chmod 600 /home/ubuntu/signal-api/.env && /home/ubuntu/signal-api/run.sh"
          ssh -i yourssu.pem ubuntu@$HOST "chmod 600 /home/ubuntu/signal-api/.env && /home/ubuntu/signal-api/observer_run.sh"
