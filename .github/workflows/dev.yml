name: Docker - Build, Push to ECR and Deploy (Dev)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to deploy'
        required: true
        default: 'latest'

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write
      contents: read

    defaults:
      run:
        working-directory: ./

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-${{ github.run_id }}
          aws-region: us-east-1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Additional Gradle caches for better performance
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle/
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Clean Build with Gradle (with Testing)
        run: |
          # 캐시 활용을 위한 빌드 옵션 추가
          ./gradlew clean build --build-cache --parallel --daemon

      # Docker 베이스 이미지 캐시
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('script/requirements.txt', 'Dockerfile') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ hashFiles('script/requirements.txt', 'Dockerfile') }}-
            ${{ runner.os }}-buildx-

      - name: Login to Amazon ECR Public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: public.ecr.aws/${{ vars.ECR_PUBLIC_REGISTRY_ID }}
          IMAGE_TAG: ${{ github.event.inputs.tag || github.sha }}
        run: |
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          echo "ECR_REPOSITORY: yourssu/${{ vars.PROJECT_NAME }}"
          echo "Full image path: $ECR_REGISTRY/yourssu/${{ vars.PROJECT_NAME }}:latest"
          
          # Create and use a new builder instance
          docker buildx create --use --name arm-builder
          
          # Build multi-platform image (ARM64 + AMD64) and push with enhanced cache
          docker buildx build \
            --platform linux/arm64,linux/amd64 \
            --push \
            --provenance=false \
            --cache-from type=gha \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=gha,mode=max \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            -t $ECR_REGISTRY/yourssu/${{ vars.PROJECT_NAME }}:$IMAGE_TAG \
            -t $ECR_REGISTRY/yourssu/${{ vars.PROJECT_NAME }}:latest \
            .
          
          # 캐시 교체
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Deploy to EC2
        env:
          YOURSSU_PEM: ${{ secrets.YOURSSU_PEM }}
          HOST_URL: ${{ vars.HOST_URL }}
          
          SERVER_PORT: ${{ vars.SERVER_PORT }}
          CORS_ALLOWED_ORIGIN: ${{ vars.CORS_ALLOWED_ORIGIN }}
          
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          
          ADMIN_ACCESS_KEY: ${{ secrets.ADMIN_ACCESS_KEY }}
          CONTACT_SECRET_KEY: ${{ secrets.CONTACT_SECRET_KEY }}
          
          WHITELIST: ${{ vars.WHITELIST }}
          CONTACT_LIMIT: ${{ vars.CONTACT_LIMIT }}
          CONTACT_LIMIT_WARNING: ${{ vars.CONTACT_LIMIT_WARNING }}
          CONTACT_PRICE: ${{ vars.CONTACT_PRICE }}
          TICKET_COST: ${{ vars.TICKET_COST }}
          TICKET_PRICE_POLICY: ${{ vars.TICKET_PRICE_POLICY }}
          TICKET_PRICE_REGISTERED_POLICY: ${{ vars.TICKET_PRICE_REGISTERED_POLICY }}
          
          OPENAI_URL: ${{ vars.OPENAI_URL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ vars.OPENAI_MODEL }}
          OPENAI_PROMPT: ${{ vars.OPENAI_PROMPT }}
          OPENAI_POLICY_PROMPT: ${{ vars.OPENAI_POLICY_PROMPT }}
          USER_INPUT_LIMIT: ${{ vars.USER_INPUT_LIMIT }}
          
          PROJECT_NAME: ${{ vars.PROJECT_NAME }}
          ENVIRONMENT: ${{ vars.ENVIRONMENT }}
          SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
          SLACK_CHANNEL: ${{ vars.SLACK_CHANNEL }}
          SLACK_ADMIN_CHANNEL: ${{ vars.SLACK_ADMIN_CHANNEL }}
          SLACK_LOG_CHANNEL: ${{ vars.SLACK_LOG_CHANNEL }}
          
          KAKAOPAY_ADMIN_KEY: ${{ secrets.KAKAOPAY_ADMIN_KEY }}
          KAKAOPAY_CID: ${{ vars.KAKAOPAY_CID }}
          KAKAOPAY_APPROVAL_URL: ${{ vars.KAKAOPAY_APPROVAL_URL }}
          KAKAOPAY_CANCEL_URL: ${{ vars.KAKAOPAY_CANCEL_URL }}
          KAKAOPAY_FAIL_URL: ${{ vars.KAKAOPAY_FAIL_URL }}
          
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_ACCESS_TOKEN_EXPIRATION: ${{ vars.JWT_ACCESS_TOKEN_EXPIRATION }}
          JWT_REFRESH_TOKEN_EXPIRATION: ${{ vars.JWT_REFRESH_TOKEN_EXPIRATION }}
          
          GOOGLE_OAUTH_CLIENT_ID: ${{ vars.GOOGLE_OAUTH_CLIENT_ID }}
          GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
          GOOGLE_OAUTH_REDIRECT_URI: ${{ vars.GOOGLE_OAUTH_REDIRECT_URI }}
          
          ECR_REGISTRY: public.ecr.aws/${{ vars.ECR_PUBLIC_REGISTRY_ID }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H $HOST_URL >> ~/.ssh/known_hosts
          echo "$YOURSSU_PEM" > yourssu.pem
          chmod 600 yourssu.pem
          
          # Create environment file
          echo "SERVER_PORT=$SERVER_PORT" >> .env
          echo "CORS_ALLOWED_ORIGIN=$CORS_ALLOWED_ORIGIN" >> .env
          
          echo "DB_URL=$DB_URL" >> .env
          echo "DB_USERNAME=$DB_USERNAME" >> .env
          echo "DB_PASSWORD=$DB_PASSWORD" >> .env
          
          echo "ADMIN_ACCESS_KEY=$ADMIN_ACCESS_KEY" >> .env
          echo "CONTACT_SECRET_KEY=$CONTACT_SECRET_KEY" >> .env
          
          echo "WHITELIST=$WHITELIST" >> .env
          echo "CONTACT_LIMIT=$CONTACT_LIMIT" >> .env
          echo "CONTACT_LIMIT_WARNING=$CONTACT_LIMIT_WARNING" >> .env
          echo "CONTACT_PRICE=$CONTACT_PRICE" >> .env
          echo "TICKET_COST=$TICKET_COST" >> .env
          echo "TICKET_PRICE_POLICY=$TICKET_PRICE_POLICY" >> .env
          echo "TICKET_PRICE_REGISTERED_POLICY=$TICKET_PRICE_REGISTERED_POLICY" >> .env
          
          echo "OPENAI_URL=$OPENAI_URL" >> .env
          echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> .env
          echo "OPENAI_MODEL=$OPENAI_MODEL" >> .env
          echo "OPENAI_PROMPT=$OPENAI_PROMPT" >> .env
          echo "OPENAI_POLICY_PROMPT=$OPENAI_POLICY_PROMPT" >> .env
          echo "USER_INPUT_LIMIT=$USER_INPUT_LIMIT" >> .env
          
          echo "PROJECT_NAME=$PROJECT_NAME" >> .env
          echo "ENVIRONMENT=$ENVIRONMENT" >> .env
          echo "SLACK_TOKEN=$SLACK_TOKEN" >> .env
          echo "SLACK_CHANNEL=$SLACK_CHANNEL" >> .env
          echo "SLACK_ADMIN_CHANNEL=$SLACK_ADMIN_CHANNEL" >> .env
          echo "SLACK_LOG_CHANNEL=$SLACK_LOG_CHANNEL" >> .env
          
          echo "KAKAOPAY_ADMIN_KEY=$KAKAOPAY_ADMIN_KEY" >> .env
          echo "KAKAOPAY_CID=$KAKAOPAY_CID" >> .env
          echo "KAKAOPAY_APPROVAL_URL=$KAKAOPAY_APPROVAL_URL" >> .env
          echo "KAKAOPAY_CANCEL_URL=$KAKAOPAY_CANCEL_URL" >> .env
          echo "KAKAOPAY_FAIL_URL=$KAKAOPAY_FAIL_URL" >> .env
          
          echo "JWT_SECRET=$JWT_SECRET" >> .env
          echo "JWT_ACCESS_TOKEN_EXPIRATION=$JWT_ACCESS_TOKEN_EXPIRATION" >> .env
          echo "JWT_REFRESH_TOKEN_EXPIRATION=$JWT_REFRESH_TOKEN_EXPIRATION" >> .env
          
          echo "GOOGLE_OAUTH_CLIENT_ID=$GOOGLE_OAUTH_CLIENT_ID" >> .env
          echo "GOOGLE_OAUTH_CLIENT_SECRET=$GOOGLE_OAUTH_CLIENT_SECRET" >> .env
          echo "GOOGLE_OAUTH_REDIRECT_URI=$GOOGLE_OAUTH_REDIRECT_URI" >> .env
          
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> .env
          
          # Create deployment directory structure
          ssh -i yourssu.pem ubuntu@$HOST_URL "mkdir -p /home/ubuntu/$PROJECT_NAME-api/logs"
          
          # Deploy environment file and docker script to host machine
          scp -i yourssu.pem .env ubuntu@$HOST_URL:/home/ubuntu/$PROJECT_NAME-api/
          scp -i yourssu.pem script/docker-deploy.sh ubuntu@$HOST_URL:/home/ubuntu/$PROJECT_NAME-api/
          
          # Make the script executable
          ssh -i yourssu.pem ubuntu@$HOST_URL "chmod +x /home/ubuntu/$PROJECT_NAME-api/docker-deploy.sh"
          
          # Execute the deployment script
          ssh -i yourssu.pem ubuntu@$HOST_URL "cd /home/ubuntu/$PROJECT_NAME-api && \
            PROJECT_NAME=$PROJECT_NAME IMAGE_TAG=${{ github.event.inputs.tag || github.sha }} ./docker-deploy.sh"
